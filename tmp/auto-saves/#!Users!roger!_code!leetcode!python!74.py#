matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]]
target = 5

def soln():
    for i in range(len(matrix)):
        if target >=  matrix[i][0] and target <= matrix[i][-1]:
            row = i
            break

    n = len(matrix[0])
    mat_r = matrix[row]
    while n > 1:
        if mat_r[int(n/2)-1] >= target:
            if mat_r[int(n/2)-1] == target:
                return True
            else:
                mat_r = mat_r[:int(n/2)]
        else:
            mat_r = mat_r[int(n/2):]
        n = len(mat_r)
        print(mat_r)

    if target in mat_r:
        return True
    print(mat_r)
    return False

print(soln())


# 80% faster
# 70% memory

# this is O(m+log(n))
# doing a standard binary search would be
# O(log(n*O) = (log(m)+log(n)) so faster.
# Oh well.
