* basic
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message 't)
  (tool-bar-mode 1)

  (setq mac-command-modifier 'meta)

  (set-face-attribute 'default nil :height 180)
#+END_SRC

#+RESULTS:

* which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config (which-key-mode))

#+END_SRC

* themes
#+BEGIN_SRC emacs-lisp
  (use-package alect-themes
    :ensure t
    :init
   ; (load-theme 'alect-light t)
    )
  (use-package flatui-theme
    :ensure t
    :init
    ;(load-theme 'flatui)
    )
  (use-package humanoid-themes
    :ensure t
    :init
    ;(load-theme 'humanoid-light)
    )
  ;(load-theme 'leuven)
  (use-package twilight-bright-theme
    :ensure t
    :init
    (load-theme 'twilight-bright t)
    )
#+END_SRC

* flycheck
#+BEGIN_SRC emacs-lisp
  ;; code autocomplete with flycheck

  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t))
#+END_SRC

* autocomplete company
#+BEGIN_SRC emacs-lisp

  (use-package company
    :ensure t
    :config
    (company-mode)
    (add-hook 'after-init-hook 'global-company-mode))

#+END_SRC

* org
#+begin_src emacs-lisp
  (setq org-hide-emphasis-markers t)

  ;; list "-" turn into bullets
  (font-lock-add-keywords 'org-mode
			  '(("^ *\\([-]\\) "
			     (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "â€¢"))))))

  (use-package org-bullets
    :ensure t
    :config 
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
    )
#+end_src

* Vertico and Consult
#+BEGIN_SRC emacs-lisp
  ;; vertico for autcompletion
  ;; Uses orderless for orderless autocompletion,
  ;; savehist for history after emacs restart.
  ;; Setup taken directly from their github.

  ;; Enable vertico
  (use-package vertico
    :init
    (vertico-mode)

    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)

    ;; Show more candidates
    ;; (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cycle t)
    )

  ;; Optionally use the `orderless' completion style. See
  ;; `+orderless-dispatch' in the Consult wiki for an advanced Orderless style
  ;; dispatcher. Additionally enable `partial-completion' for file path
  ;; expansion. `partial-completion' is important for wildcard support.
  ;; Multiple files can be opened at once with `find-file' if you enter a
  ;; wildcard. You may also give the `initials' completion style a try.
  (use-package orderless
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless)
	  completion-category-defaults nil
	  completion-category-overrides '((file (styles partial-completion)))))

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; Alternatively try `consult-completing-read-multiple'.
    (defun crm-indicator (args)
      (cons (concat "[CRM] " (car args)) (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
	  '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))
  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(package-selected-packages
     '(consult orderless vertico which-key use-package flycheck alect-themes)))
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   )


  ;; consult

  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings (mode-specific-map)
	   ("C-c h" . consult-history)
	   ("C-c m" . consult-mode-command)
	   ("C-c k" . consult-kmacro)
	   ;; C-x bindings (ctl-x-map)
	   ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
	   ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
	   ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
	   ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
	   ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
	   ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
	   ;; Custom M-# bindings for fast register access
	   ("M-#" . consult-register-load)
	   ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
	   ("C-M-#" . consult-register)
	   ;; Other custom bindings
	   ("M-y" . consult-yank-pop)                ;; orig. yank-pop
	   ("<help> a" . consult-apropos)            ;; orig. apropos-command
	   ;; M-g bindings (goto-map)
	   ("M-g e" . consult-compile-error)
	   ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
	   ("M-g g" . consult-goto-line)             ;; orig. goto-line
	   ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
	   ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
	   ("M-g m" . consult-mark)
	   ("M-g k" . consult-global-mark)
	   ("M-g i" . consult-imenu)
	   ("M-g I" . consult-imenu-multi)
	   ;; M-s bindings (search-map)
	   ("M-s d" . consult-find)
	   ("M-s D" . consult-locate)
	   ("M-s g" . consult-grep)
	   ("M-s G" . consult-git-grep)
	   ("M-s r" . consult-ripgrep)
	   ("M-s l" . consult-line)
	   ("M-s L" . consult-line-multi)
	   ("M-s m" . consult-multi-occur)
	   ("M-s k" . consult-keep-lines)
	   ("M-s u" . consult-focus-lines)
	   ;; Isearch integration
	   ("M-s e" . consult-isearch-history)
	   :map isearch-mode-map
	   ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
	   ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
	   ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
	   ("M-s L" . consult-line-multi))           ;; needed by consult-line to detect isearch

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI. You may want to also
    ;; enable `consult-preview-at-point-mode` in Embark Collect buffers.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
	  register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Optionally replace `completing-read-multiple' with an enhanced version.
    (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
	  xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key (kbd "M-."))
    ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme
     :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-recent-file
     consult--source-project-recent-file
     :preview-key (kbd "M-."))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; (kbd "C-+")

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; By default `consult-project-root-function' uses `project-root' from project.el.
    ;; Optionally configure a different project root function.
    ;; There are multiple reasonable alternatives to chose from.
    ;;;; 1. project.el (the default)
    ;; (setq consult-project-root-function #'consult--project-root-default-function)
    ;;;; 2. projectile.el (projectile-project-root)
    ;; (autoload 'projectile-project-root "projectile")
    ;; (setq consult-project-root-function #'projectile-project-root)
    ;;;; 3. vc.el (vc-root-dir)
    ;; (setq consult-project-root-function #'vc-root-dir)
    ;;;; 4. locate-dominating-file
    ;; (setq consult-project-root-function (lambda () (locate-dominating-file "." ".git")))
  )

#+END_SRC
* Yasnippet
#+BEGIN_SRC emacs-lisp

  (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode 1)
    )

  (use-package yasnippet-snippets
    :ensure t)
#+END_SRC
* Jedi python
#+begin_src emacs-lisp
  ;; (use-package jedi
  ;;   :ensure t
  ;;   :init
  ;;   (add-hook 'python-mode-hook 'jedi:setup)
  ;;   (add-hook 'python-mode-hook 'jedi:ac-setup))

#+end_src
* python
#+begin_src emacs-lisp
  (use-package anaconda-mode
    :ensure t
    :init
    (add-hook 'python-mode-hook 'anaconda-mode)
    (add-hook 'python-mode-hook 'anaconda-eldoc-mode))

  (use-package company-anaconda
    :ensure t)

  (eval-after-load "company"
   '(add-to-list 'company-backends 'company-anaconda))
#+end_src
*  LaTeX
** TODO figure out auto-fill-mode for latex and some sort of auto global templating
#+begin_src emacs-lisp
  (use-package :tex
    :ensure auctex
    :mode ("\\.tex\\'" . latex-mode)
    :config
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq-default TeX-master nil)
    (add-hook 'LaTeX-mode-hook 'visual-line-mode)
    (add-hook 'Latex-mode-hook 'auto-fill-mode) ;; doesnt work ?? 
    (add-hook 'LaTeX-mode-hook 'flyspell-mode)
   ;; (setq Tex-Master "/Users/roger/_School/template.tex")
    )

  (use-package company-auctex
    :ensure t
    :init
    (add-to-list 'load-path "/Users/roger/.emacs.d/elpa/company-auctex-20200529.1835/company-auctex.el")
    (company-auctex-init)
    )

  (defvar visual-wrap-column nil)
  (defun set-visual-wrap-column (new-wrap-column &optional buffer)
    "Force visual line wrap at NEW-WRAP-COLUMN in BUFFER (defaults
      to current buffer) by setting the right-hand margin on every
      window that displays BUFFER.  A value of NIL or 0 for
      NEW-WRAP-COLUMN disables this behavior."
    (interactive (list (read-number "New visual wrap column, 0 to disable: " (or visual-wrap-column fill-column 0))))
    (if (and (numberp new-wrap-column)
	     (zerop new-wrap-column))
	(setq new-wrap-column nil))
    (with-current-buffer (or buffer (current-buffer))
      (visual-line-mode t)
      (set (make-local-variable 'visual-wrap-column) new-wrap-column)
      (add-hook 'window-configuration-change-hook 'update-visual-wrap-column nil t)
      (let ((windows (get-buffer-window-list)))
	(while windows
	  (when (window-live-p (car windows))
	    (with-selected-window (car windows)
	      (update-visual-wrap-column)))
	  (setq windows (cdr windows))))))


  (defun update-visual-wrap-column ()
    (if (not visual-wrap-column)
	(set-window-margins nil nil)
      (let* ((current-margins (window-margins))
	     (right-margin (or (cdr current-margins) 0))
	     (current-width (window-width))
	     (current-available (+ current-width right-margin)))
	(if (<= current-available visual-wrap-column)
	    (set-window-margins nil (car current-margins))
	  (set-window-margins nil (car current-margins)
			      (- current-available visual-wrap-column))))))
#+end_src
* TODO clean backup files
#+begin_src emacs-lisp
  ;; solution from https://github.com/daviwil/emacs-from-scratch/blob/master/show-notes/Emacs-Tips-Cleaning.org

  (setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))


  ;; auto-save-mode doesn't create the path automatically!
  (make-directory (expand-file-name "tmp/auto-saves/" user-emacs-directory) t)

  (setq auto-save-list-file-prefix (expand-file-name "tmp/auto-saves/sessions/" user-emacs-directory)
	auto-save-file-name-transforms `((".*" ,(expand-file-name "tmp/auto-saves/" user-emacs-directory) t)))

#+end_src
* git
#+begin_src emacs-lisp
  (use-package magit
    :ensure t)
#+end_src

* mode line
#+begin_src emacs-lisp
  (use-package mood-line
    :ensure t
    :init
    (mood-line-mode))

#+end_src
